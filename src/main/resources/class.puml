@startuml

class ThreadPool {
    - threads: WorkerThread[]
    - taskQueue: Queue<Runnable>
    + {method} ThreadPool(int threadCount)
    + {method} submit(Callable<T> task): Future<T>
    + {method} shutdown()
}

class WorkerThread extends Thread {
    - taskQueue: Queue<Runnable>
    - running: boolean
    + {method} WorkerThread(Queue<Runnable> taskQueue)
    + {method} run()
    + {method} shutdown()
}


class OnlineJudge {
    - answerList: List<Answer>
    - idToExamMap: Map<Integer, Exam>
    - examScoreList: List<ExamScore>
    - fileProcessor: FileProcessor
    - threadPool: ThreadPool
    - examsPath: String
    - answersPath: String
    - outPath: String
    + OnlineJudge(String, String, String)
    + run(): void
    + init(String, String): void
    + calculateExamScoreList(): List<ExamScore>
    + calculateExamScore(List<Question>, List<AnswerItem>): int
    + saveScoreList(String): void
    - initQuestionScoreStrategy(): void
}

interface ScoringStrategy {
    + {method} calculateQuestionScore(Object self_writtenAnswer): int
}


class SingleChoiceScoringStrategy implements ScoringStrategy {
    - answer: int
    - points: int
    + {method} SingleChoiceScoringStrategy(int answer, int points)
    + {method} calculateQuestionScore(Object self_writtenAnswer): int
}

class ProgrammingScoringStrategy implements ScoringStrategy {
    - points: int
    - samples: List<SampleItem>
    - timeLimit: int
    - codeHandlerFactory: CodeHandlerFactory
    - codeHandlerAdapter: CodeHandlerAdapter
    + {method} ProgrammingScoringStrategy(int points, List<SampleItem> samples, int timeLimit)
    + {method} calculateQuestionScore(Object self_writtenAnswer): int
    - {method} getFileExtension(String filePath): String
}



class PartialScoringStrategy implements ScoringStrategy {
    - partialScore: List<Integer>
    - correctAnswer: List<Integer>
    - points: int
    + {method} PartialScoringStrategy(List<Integer> partialScore, List<Integer> correctAnswer, int points)
    + {method} calculateQuestionScore(Object self_writtenAnswer): int
}

class NothingScoringStrategy implements ScoringStrategy {
    - correctAnswer: List<Integer>
    - points: int
    + {method} NothingScoringStrategy(List<Integer> correctAnswer, int points)
    + {method} calculateQuestionScore(Object self_writtenAnswer): int
}

class FixScoringStrategy implements ScoringStrategy {
    - fixScore: int
    - correctAnswer: List<Integer>
    - points: int
    + {method} FixScoringStrategy(int points, int fixScore, List<Integer> correctAnswer)
    + {method} calculateQuestionScore(Object self_writtenAnswer): int
}

class Question<T> {
    - id: int
    - type: int
    - question: String
    - points: int
    - scoringStrategy: ScoringStrategy
    + {abstract} initStrategy(): void
    + {abstract} toString(): String
}

class ProgrammingQuestion extends Question{
    - samples: List<SampleItem>
    - timeLimit: int
    - points: int
    + {method} ProgrammingQuestion()
    + {method} initStrategy(): void
    + {method} toString(): String
}

class SingleChoiceQuestion extends Question{
    - options: List<String>
    - answer: int
    + {method} SingleChoiceQuestion()
    + {method} initStrategy(): void
    + {method} toString(): String
}

class MultipleChoiceQuestion extends Question{
    - scoreMode: String
    - options: List<String>
    - answer: List<Integer>
    + {method} MultipleChoiceQuestion()
    + {method} toString(): String
}

class MultipleChoiceQuestionFix extends MultipleChoiceQuestion{
    - fixScore: int
    + {method} MultipleChoiceQuestionFix()
    + {method} initStrategy(): void
    + {method} toString(): String
}

class MultipleChoiceQuestionNothing extends MultipleChoiceQuestion{
    + {method} MultipleChoiceQuestionNothing()
    + {method} initStrategy(): void
    + {method} toString(): String
}

class MultipleChoiceQuestionPartial extends MultipleChoiceQuestion{
    - partialScore: List<Integer>
    + {method} MultipleChoiceQuestionPartial()
    + {method} initStrategy(): void
    + {method} toString(): String
}

class Answer {
    - examId: int
    - studentId: int
    - submitTime: long
    - answers: List<AnswerItem>
    + toString(): String
}

class AnswerItem {
    - id: int
    - answer: String
}

class Exam {
    - id: int
    - title: String
    - startTime: long
    - endTime: long
    - questions: List<Question>
    + toString(): String
}

class ExamScore {
    - examId: int
    - stuId: int
    - score: int
    + ExamScore(int examId, int stuId, int score)
    + toString(): String
}

class SampleItem {
    - input: String
    - output: String
    + getProgramArgs(): String[]
    + toString(): String
}

class Complexity {
    - examId: int
    - stuId: int
    - qId: int
    - complexity: int
    + Complexity(examId: int, stuId: int, qId: int, complexity: int)
    + toString(): String
}

interface Reader<T> {
    + read(filePath: String): T throws IOException
    + read(file: File): T throws IOException
}

class JsonReader<T> implements Reader<T>{
    - valueType: Class<T>
    - mapper: ObjectMapper
    + JsonReader(valueType: Class<T>)
    + addDeserializer(targetType: Class<D>, customDeserializer: JsonDeserializer<? extends D>): void
    + read(filePath: String): T throws IOException
    + read(file: File): T throws IOException
}

class XmlReader implements Reader<T>{
    + read(file: File): Exam throws IOException
    + read(filePath: String): Exam throws IOException
}

interface Writer<T> {
    + write(filePath: String, content: T): void throws IOException
}

class CSVWriter<T> implements Writer<T>{
    + write(filePath: String, content: Object): void throws IOException
}
class FileReaderFactory {
    + createFileReader(fileType: String, type: Class<T>): Reader<T>
}

interface FileProcessor {
    + readAnswer(answersPath: String): List<Answer> throws IOException
    + readExam(examsPath: String): Map<Integer, Exam> throws IOException
    + saveExamScoreList(outputPath: String, scoreList: List<ExamScore>): void throws IOException
    + saveComplexityList(outputPath: String, complexityList: List<Complexity>): void throws IOException
}

class FileProcessorImpl implements FileProcessor{
    + readExam(examsPath: String): Map<Integer, Exam> throws IOException
    + saveExamScoreList(outputPath: String, scoreList: List<ExamScore>): void throws IOException
    + readAnswer(answersPath: String): List<Answer> throws IOException
    + saveComplexityList(outputPath: String, complexityList: List<Complexity>): void throws IOException
}
class ProcessorFactory {
    + getProcessor(codeType: String): ProcessorTemplate
}
class ProcessorTemplate {
        - threadPool: ThreadPool
        + createPreprocessor(): Preprocessor
        + getCyclomaticComplexity(filePath: String): int
        + createExecutor(): Executor
        + isCompiledLanguage(): boolean
        + handleCode(filePath: String, point: int, sampleList: List<SampleItem>, timeLimit: int): int
        - compileFileTask(preprocessor: Preprocessor, fileAbsolutePath: String): Future<Boolean>
        - executeTasks(tasks: List<Callable<String>>, point: int, time_limit: int, outputList: List<String>): int
}

interface Executor {
    + execute(compiledFilePath: String, args: String[]): String
}

interface Preprocessor {
    + compile(filePath: String): boolean
    + getCompileDirectory(): String
    + calculateMethodCyclomaticComplexity(methodCode: Node): int
    + calculateClassCyclomaticComplexity(filePath: String): int
}

class JavaPreprocessor implements Preprocessor{
    - compileDirectory: String
    + getCompileDirectory(): String
    + compile(filePath: String): boolean
    + calculateMethodCyclomaticComplexity(method: Node): int
    + calculateClassCyclomaticComplexity(filePath: String): int
}

class JavaExecutor implements Executor{
    + execute(compiledFilePath: String, args: String[]): String
}

class JavaCodeProcessor implements ProcessorTemplate{
    + createPreprocessor(): Preprocessor
    + createExecutor(): Executor
    + isCompiledLanguage(): boolean
    + getCyclomaticComplexity(filePath: String): int
}

OnlineJudge --> Answer
OnlineJudge --> Exam
OnlineJudge --> ExamScore
OnlineJudge --> FileProcessor
OnlineJudge --> Complexity

FileProcessorImpl --> Writer
FileProcessorImpl --> FileReaderFactory

Question --> ScoringStrategy

ProgrammingQuestion "1" --> "n" SampleItem : contains
ProgrammingScoringStrategy --> ProcessorFactory

ProcessorFactory --> ProcessorTemplate

FileReaderFactory --> Reader

ThreadPool "1" --> "*" WorkerThread : contains

Answer "1"-->"*" AnswerItem : contains

Exam --> Question

ProcessorTemplate --> ThreadPool
ProcessorTemplate --> Preprocessor
ProcessorTemplate --> Executor

@enduml
